package org.bitbuckets.RGB;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.led.*;
import org.bitbuckets.lib.log.Debuggable;

import java.awt.*;

public class RgbSubsystem {

    final CANdle candle;

    RgbFSM state = RgbFSM.DEFAULT;

    final OperatorInput rgbInput;

    final Debuggable debuggable;

    public RgbSubsystem(CANdle candle, OperatorInput rgbInput, Debuggable debuggable) {
        this.candle = candle;
        this.rgbInput = rgbInput;
        this.debuggable = debuggable;
    }


    public void robotPeriodic() {

        switch (state) {
            case DISABLED:
                break;
            case DEFAULT:
                if (rgbInput.) {
                    state = RgbFSM.CUBE;
                    break;
                }
                RainbowAnimation rainbowAnim = new RainbowAnimation(1, 1, 68);
                candle.animate(rainbowAnim);
                ErrorCode error = candle.getLastError(); // gets the last error generated by the CANdle
                CANdleFaults faults = new CANdleFaults();
                ErrorCode faultsError = candle.getFaults(faults); // fills faults with the current CANdle faults; returns the last error generated
                break;
            case CUBE:
                if (rgbInput.) {
                    state = RgbFSM.CONE;
                    break;
                }
                candle.setLEDs(119, 0, 200);
                break;

            case CONE:
                candle.setLEDs(225,215,0);

            case BALANCING:
                candle.setLEDs(255, 0, 0);
        }

    }


}
